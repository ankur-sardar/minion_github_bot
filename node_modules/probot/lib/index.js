"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var bunyan_1 = __importDefault(require("bunyan"));
exports.Logger = bunyan_1.default;
var cache_manager_1 = __importDefault(require("cache-manager"));
var application_1 = require("./application");
exports.Application = application_1.Application;
var context_1 = require("./context");
exports.Context = context_1.Context;
var github_app_1 = require("./github-app");
var logger_1 = require("./logger");
var resolver_1 = require("./resolver");
var server_1 = require("./server");
var webhook_proxy_1 = require("./webhook-proxy");
// tslint:disable:no-var-requires
// These needs types
var Webhooks = require('@octokit/webhooks');
var logRequestErrors = require('./middleware/log-request-errors');
var cache = cache_manager_1.default.caching({
    store: 'memory',
    ttl: 60 * 60 // 1 hour
});
var defaultApps = [
    require('./plugins/default'),
    require('./plugins/sentry'),
    require('./plugins/stats')
];
// tslint:enable:no-var-requires
var Probot = /** @class */ (function () {
    function Probot(options) {
        var _this = this;
        options.webhookPath = options.webhookPath || '/';
        options.secret = options.secret || 'development';
        this.options = options;
        this.logger = logger_1.logger;
        this.apps = [];
        this.webhook = new Webhooks({ path: options.webhookPath, secret: options.secret });
        this.app = github_app_1.createApp({ id: options.id, cert: options.cert });
        this.server = server_1.createServer({ webhook: this.webhook.middleware, logger: logger_1.logger });
        // Log all received webhooks
        this.webhook.on('*', function (event) {
            var webhookEvent = __assign({}, event, { event: event.name });
            delete webhookEvent.name;
            return _this.receive(webhookEvent);
        });
        // Log all webhook errors
        this.webhook.on('error', this.errorHandler);
    }
    Probot.prototype.errorHandler = function (err) {
        switch (err.message) {
            case 'X-Hub-Signature does not match blob signature':
            case 'No X-Hub-Signature found on request':
            case 'webhooks:receiver ignored: POST / due to missing headers: x-hub-signature':
                logger_1.logger.error('Go to https://github.com/settings/apps/YOUR_APP and verify that the Webhook secret matches the value of the WEBHOOK_SECRET environment variable.');
                break;
            case 'error:0906D06C:PEM routines:PEM_read_bio:no start line':
            case '{"message":"A JSON web token could not be decoded","documentation_url":"https://developer.github.com/v3"}':
                logger_1.logger.error('Your private key (usually a .pem file) is not correct. Go to https://github.com/settings/apps/YOUR_APP and generate a new PEM file. If you\'re deploying to Now, visit https://probot.github.io/docs/deployment/#now.');
                break;
            default:
                logger_1.logger.error(err);
        }
    };
    Probot.prototype.receive = function (event) {
        this.logger.debug({ event: event }, 'Webhook received');
        return Promise.all(this.apps.map(function (app) { return app.receive(event); }));
    };
    Probot.prototype.load = function (appFunction) {
        if (typeof appFunction === 'string') {
            appFunction = resolver_1.resolve(appFunction);
        }
        var app = new application_1.Application({ app: this.app, cache: cache, catchErrors: true });
        // Connect the router from the app to the server
        this.server.use(app.router);
        // Initialize the plugin
        app.load(appFunction);
        this.apps.push(app);
        return app;
    };
    Probot.prototype.setup = function (apps) {
        var _this = this;
        // Log all unhandled rejections
        process.on('unhandledRejection', this.errorHandler);
        // Load the given apps along with the default apps
        apps.concat(defaultApps).forEach(function (app) { return _this.load(app); });
        // Register error handler as the last middleware
        this.server.use(logRequestErrors);
    };
    Probot.prototype.start = function () {
        if (this.options.webhookProxy) {
            webhook_proxy_1.createWebhookProxy({
                logger: logger_1.logger,
                path: this.options.webhookPath,
                port: this.options.port,
                url: this.options.webhookProxy
            });
        }
        this.server.listen(this.options.port);
        logger_1.logger.info('Listening on http://localhost:' + this.options.port);
    };
    return Probot;
}());
exports.Probot = Probot;
exports.createProbot = function (options) { return new Probot(options); };
//# sourceMappingURL=index.js.map